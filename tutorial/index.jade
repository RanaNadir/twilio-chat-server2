.chapter(data-title='Twilio Chat')
  .step(
    data-title='Introduction',
    data-file='src/main/java/com/twilio/chat/TokenServlet.java')
    :markdown
      ## Introduction

      Ready to implement a chat application using Twilio Programmable Chat Client?

      ![TwilioChat Screenshot](http://howtodocs.s3.amazonaws.com/twiliochat-screenshot.jpg)

      This application allow users to exchange messages through different channels,
      using the Twilio Programmable Chat API. On this example, we'll show how to use
      this API capabilities to manage channels and their usages.

      ---

      **See Also:**
      * [Programmable Chat API](//twilio.com/docs/api/chat)
      * [Channels and Messages](//twilio.com/docs/api/chat/guides/channels)
      * [User Identity & Access Tokens](//twilio.com/docs/api/chat/guides/create-tokens)
      * [Twilio Programmable Chat Client Reference](//media.twiliocdn.com/sdk/js/chat/releases/0.11.1/docs)

  .step(data-title='Token Generation',
        data-file='src/main/java/com/twilio/chat/TwilioTokenCreator.java',
        data-highlight='20-32')
    :markdown
      ## Token Generation

      In order to create a Twilio Programmable Chat client, you will need an access
      token. This token holds information about your Twilio Account and IP
      Messaging API keys.

      We generate this token by creating a new `AccessToken` and providing it with
      an `IpMessagingGrant`. With the `AccessToken` at hand, we can use its
      method `ToJWT()` to return its string representation.

      ---

      ** See also **
      * [Twilio API Access Tokens](//twilio.com/docs/api/rest/access-tokens)

  .step(data-title='Token Generation Controller',
        data-file='src/main/java/com/twilio/chat/TokenServlet.java',
        data-highlight='26-44')
    :markdown
      ## Token Generation Controller

      On our controller we expose the endpoint responsible for providing a valid
      token. Using the information provided as parameters:

      * `device`: identifies the device being used.
      * `identity`: identifies the user itself.

      It uses `tokenGenerator.Generate` method to get hold of a new token
      and return it in a JSON format to be used for our client.

  .step(data-title='Initializing the Client',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='82-89,94')
    :markdown
      ## Initializing the Programmable Chat Client

      On our client, we fetch a new Token using a POST request to our endpoint.

      With the token we can create a new `Twilio.AccessManager` that
      is used to initialize our `Twilio.Chat.Client`.

  .step(data-title='Getting the Channel List',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='128-136')
    :markdown
      ## Getting the Channel List

      After initializing the client, we can call its method `getPublicChannels` to
      retrieve all visible channels. The method returns a promise which we use
      to show the list of channels retrieved on the UI.

      ---

      ** See Also **
      * [Client API: Get Channels](//twilio.com/docs/api/chat/guides/channels)

  .step(data-title='Join the General Channel',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='140-151')
    :markdown
      ## Join the General Channel

      This application will try to join a channel called "General Channel" when it starts.
      If the channel doesn't exist, we'll create one with that name. The scope of
      this example application will show you how to work only with public channels,
      but the Programmable Chat client allows you to create private channels and handle
      invitations.

      Notice we set a unique name for the general channel as we don't want to
      create a new general channel every time we start the application.

  .step(data-title='Listen to Channel Events',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='99-102')
    :markdown
      ## Listen to Channel Events

      Next we listen for channel events. In our case, we're setting listeners to the
      following events:

      * `messageAdded`: When another member sends a message to the channel you are connected to.
      * `typingStarted`: When another member is typing a message on the channel that you are connected to.
      * `typingEnded`: When another member stops typing a message on the channel that you are connected to.
      * `memberJoined`: When another member joins the channel that you are connected to.
      * `memberLeft`: When another member leaves the channel that you are connected to.

      We register a different function to handle each particular event.

      ---

      *** For a complete list of channel events ***
      * [Channel API](//twilio.com/docs/api/chat/guides/channels)

  .step(data-title='Listen to Client Events',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='326-338')
    :markdown
      ## Listen to Client Events

      Just like with channels, we can register handlers for events on the Client:

      * `channelAdded`: When a channel becomes visible to the Client.
      * `channelRemoved`: When a channel is no longer visible to the Client.
      * `tokenExpired`: When the supplied token expires.

      *** For a complete list of client events ***
      * [Programmable Chat Client API](//twilio.com/docs/api/chat)

  .step(data-title='Creating a Channel',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='60-68')
    :markdown
      ## Creating a Channel

      When a user clicks on the "+ Channel" link we'll show an input text
      field where it's possible to type the name of the new channel. Creating
      a channel is as simple as calling `createChannel` with an object that
      has the `friendlyName` key. You can create a channel with more options
      listed on the [Channels section](//twilio.com/docs/api/chat/guides/channels) of the Programmable Chat documentation.

      ---

      ** See Also **
      * [Programmable Chat Client API: Create a Channel](//twilio.com/docs/api/chat/guides/channels)


  .step(data-title='Joining Other Channels',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='300-310')
    :markdown
      ## Joining Other Channels

      When you tap on the name of a channel from the sidebar, that channel is set
      as the `selectedChannel`. The `selectChannel` method takes care of joining
      to the selected channel and setting up the `selectedChannel`.

  .step(data-title='Deleting a Channel',
        data-file='src/main/webapp/js/twiliochat.js',
        data-highlight='312-326')
    :markdown
      ## Deleting a Channel

      Deleting a channel is even more simple than creating one. The application
      lets the user delete the channel they are currently joined to through the
      "delete current channel" link. The only thing you need to do to
      actually delete the channel from Twilio, is call the `delete` method
      on the channel you are trying to delete. Like other methods on the `Channel`
      object, it'll return a promise where you can set the success handler.

      ---

      ** See Also **
      * [Channel API: Create a Channel](//media.twiliocdn.com/sdk/js/chat/releases/0.11.1/docs/Channel.html)
  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented a simple chat application for Java using
      Servlet API. If you are a Java developer working with Twilio, you might want
      to check out these other tutorials:

      [SMS and MMS Notifications](//twilio.com/docs/tutorials/walkthrough/server-notifications/java/servlets)

      Never miss another server outage. Learn how to build a server notification
      system that will alert all administrators via SMS when a server outage occurs.

      [Workflow Automation](//twilio.com/docs/tutorials/walkthrough/workflow-automation/java/servlets)

      Increase your rate of response by automating the workflows that are key
      to your business. In this tutorial, learn how to build a ready-for-scale
      automated SMS workflow, for a vacation rental company.

      [Masked Phone Numbers](//twilio.com/docs/tutorials/walkthrough/masked-numbers/java/servlets)

      Protect your users' privacy by anonymously connecting them with Twilio
      Voice and SMS. Learn how to create disposable phone numbers on-demand,
      so two users can communicate without exchanging personal information.

      **Did this help?**

      Thanks for checking out this tutorial! If you have any feedback
      to share with us, we'd love to hear it.
      [Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
